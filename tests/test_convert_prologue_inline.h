/*
AYMO - Accelerated YaMaha Operator
Copyright (c) 2023-2024 Andrea Zoppi.

This file is part of AYMO.

AYMO is free software: you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free
Software Foundation, either version 2.1 of the License, or (at your option)
any later version.

AYMO is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
more details.

You should have received a copy of the GNU Lesser General Public License
along with AYMO. If not, see <https://www.gnu.org/licenses/>.
*/

#include "aymo_cc.h"

#include <math.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>

AYMO_CXX_EXTERN_C_BEGIN


static int app_return;


#define ref_n 64u


#undef DIRTY

#undef x0xmm
#undef x0xMM

#undef mmu
#undef MMu

#undef K
#undef xmm_f
#undef xMM_f
#undef xmi_f
#undef xMI_f
#undef xmu_f
#undef xMU_f


#define DIRTY   (0xCCu)

#define x0xmm   (INT16_MIN)
#define x0xMM   (INT16_MAX)

#define xxmmu   (0u)
#define xxMMu   (UINT16_MAX)

#define K       (+32768.f)
#define x0xff   (-1024.f * K)
#define x0xFF   (+1024.f * K)
#define x0xfi   ((float)x0xmm)
#define x0xFI   ((float)x0xMM)
#define x0xfu   ((float)xxmmu)
#define x0xFU   ((float)xxMMu)


static float buf_f32[ref_n];
static int16_t buf_i16[ref_n];
static uint16_t buf_u16[ref_n];


const int16_t src_i16[ref_n] = {
    x0xmm,  -0x01,  -0x02,  +0x03,  x0xMM,  -0x05,  -0x06,  +0x07,
    -0x10,  x0xmm,  +0x12,  -0x13,  -0x14,  x0xMM,  -0x16,  -0x17,
    +0x20,  +0x21,  x0xmm,  -0x23,  -0x24,  -0x25,  x0xMM,  -0x27,
    -0x30,  -0x31,  +0x32,  x0xmm,  +0x34,  +0x35,  +0x36,  x0xMM,
    x0xMM,  -0x41,  +0x42,  +0x43,  x0xmm,  +0x45,  -0x46,  -0x47,
    +0x50,  x0xMM,  -0x52,  -0x53,  +0x54,  x0xmm,  +0x56,  +0x57,
    +0x60,  -0x61,  x0xMM,  +0x63,  -0x64,  +0x65,  x0xmm,  -0x67,
    -0x70,  +0x71,  +0x72,  x0xMM,  +0x74,  -0x75,  -0x76,  x0xmm
};

const float ref_i16_f32[ref_n] = {
    x0xfi,  -0x01,  -0x02,  +0x03,  x0xFI,  -0x05,  -0x06,  +0x07,
    -0x10,  x0xfi,  +0x12,  -0x13,  -0x14,  x0xFI,  -0x16,  -0x17,
    +0x20,  +0x21,  x0xfi,  -0x23,  -0x24,  -0x25,  x0xFI,  -0x27,
    -0x30,  -0x31,  +0x32,  x0xfi,  +0x34,  +0x35,  +0x36,  x0xFI,
    x0xFI,  -0x41,  +0x42,  +0x43,  x0xfi,  +0x45,  -0x46,  -0x47,
    +0x50,  x0xFI,  -0x52,  -0x53,  +0x54,  x0xfi,  +0x56,  +0x57,
    +0x60,  -0x61,  x0xFI,  +0x63,  -0x64,  +0x65,  x0xfi,  -0x67,
    -0x70,  +0x71,  +0x72,  x0xFI,  +0x74,  -0x75,  -0x76,  x0xfi
};

const float ref_i16_f32_1[ref_n] = {
    x0xfi/K,  -0x01/K,  -0x02/K,  +0x03/K,  x0xFI/K,  -0x05/K,  -0x06/K,  +0x07/K,
    -0x10/K,  x0xfi/K,  +0x12/K,  -0x13/K,  -0x14/K,  x0xFI/K,  -0x16/K,  -0x17/K,
    +0x20/K,  +0x21/K,  x0xfi/K,  -0x23/K,  -0x24/K,  -0x25/K,  x0xFI/K,  -0x27/K,
    -0x30/K,  -0x31/K,  +0x32/K,  x0xfi/K,  +0x34/K,  +0x35/K,  +0x36/K,  x0xFI/K,
    x0xFI/K,  -0x41/K,  +0x42/K,  +0x43/K,  x0xfi/K,  +0x45/K,  -0x46/K,  -0x47/K,
    +0x50/K,  x0xFI/K,  -0x52/K,  -0x53/K,  +0x54/K,  x0xfi/K,  +0x56/K,  +0x57/K,
    +0x60/K,  -0x61/K,  x0xFI/K,  +0x63/K,  -0x64/K,  +0x65/K,  x0xfi/K,  -0x67/K,
    -0x70/K,  +0x71/K,  +0x72/K,  x0xFI/K,  +0x74/K,  -0x75/K,  -0x76/K,  x0xfi/K
};


const uint16_t src_u16[ref_n] = {
    xxmmu,  0x01u,  0x02u,  0x03u,  xxMMu,  0x05u,  0x06u,  0x07u,
    0x10u,  xxmmu,  0x12u,  0x13u,  0x14u,  xxMMu,  0x16u,  0x17u,
    0x20u,  0x21u,  xxmmu,  0x23u,  0x24u,  0x25u,  xxMMu,  0x27u,
    0x30u,  0x31u,  0x32u,  xxmmu,  0x34u,  0x35u,  0x36u,  xxMMu,
    xxMMu,  0x41u,  0x42u,  0x43u,  xxmmu,  0x45u,  0x46u,  0x47u,
    0x50u,  xxMMu,  0x52u,  0x53u,  0x54u,  xxmmu,  0x56u,  0x57u,
    0x60u,  0x61u,  xxMMu,  0x63u,  0x64u,  0x65u,  xxmmu,  0x67u,
    0x70u,  0x71u,  0x72u,  xxMMu,  0x74u,  0x75u,  0x76u,  xxmmu
};

const float ref_u16_f32[ref_n] = {
    x0xfu,  +0x01,  +0x02,  +0x03,  x0xFU,  +0x05,  +0x06,  +0x07,
    +0x10,  x0xfu,  +0x12,  +0x13,  +0x14,  x0xFU,  +0x16,  +0x17,
    +0x20,  +0x21,  x0xfu,  +0x23,  +0x24,  +0x25,  x0xFU,  +0x27,
    +0x30,  +0x31,  +0x32,  x0xfu,  +0x34,  +0x35,  +0x36,  x0xFU,
    x0xFU,  +0x41,  +0x42,  +0x43,  x0xfu,  +0x45,  +0x46,  +0x47,
    +0x50,  x0xFU,  +0x52,  +0x53,  +0x54,  x0xfu,  +0x56,  +0x57,
    +0x60,  +0x61,  x0xFU,  +0x63,  +0x64,  +0x65,  x0xfu,  +0x67,
    +0x70,  +0x71,  +0x72,  x0xFU,  +0x74,  +0x75,  +0x76,  x0xfu
};

const float ref_u16_f32_1[ref_n] = {
    x0xfu/K,  +0x01/K,  +0x02/K,  +0x03/K,  x0xFU/K,  +0x05/K,  +0x06/K,  +0x07/K,
    +0x10/K,  x0xfu/K,  +0x12/K,  +0x13/K,  +0x14/K,  x0xFU/K,  +0x16/K,  +0x17/K,
    +0x20/K,  +0x21/K,  x0xfu/K,  +0x23/K,  +0x24/K,  +0x25/K,  x0xFU/K,  +0x27/K,
    +0x30/K,  +0x31/K,  +0x32/K,  x0xfu/K,  +0x34/K,  +0x35/K,  +0x36/K,  x0xFU/K,
    x0xFU/K,  +0x41/K,  +0x42/K,  +0x43/K,  x0xfu/K,  +0x45/K,  +0x46/K,  +0x47/K,
    +0x50/K,  x0xFU/K,  +0x52/K,  +0x53/K,  +0x54/K,  x0xfu/K,  +0x56/K,  +0x57/K,
    +0x60/K,  +0x61/K,  x0xFU/K,  +0x63/K,  +0x64/K,  +0x65/K,  x0xfu/K,  +0x67/K,
    +0x70/K,  +0x71/K,  +0x72/K,  x0xFU/K,  +0x74/K,  +0x75/K,  +0x76/K,  x0xfu/K
};


const float src_f32[ref_n] = {
    x0xff,  -0x01,  -0x02,  +0x03,  x0xFF,  -0x05,  -0x06,  +0x07,
    -0x10,  x0xff,  +0x12,  -0x13,  -0x14,  x0xFF,  -0x16,  -0x17,
    +0x20,  +0x21,  x0xff,  -0x23,  -0x24,  -0x25,  x0xFF,  -0x27,
    -0x30,  -0x31,  +0x32,  x0xff,  +0x34,  +0x35,  +0x36,  x0xFF,
    x0xFF,  -0x41,  +0x42,  +0x43,  x0xff,  +0x45,  -0x46,  -0x47,
    +0x50,  x0xFF,  -0x52,  -0x53,  +0x54,  x0xff,  +0x56,  +0x57,
    +0x60,  -0x61,  x0xFF,  +0x63,  -0x64,  +0x65,  x0xff,  -0x67,
    -0x70,  +0x71,  +0x72,  x0xFF,  +0x74,  -0x75,  -0x76,  x0xff
};

const int16_t ref_f32_i16[ref_n] = {
    x0xmm,  -0x01,  -0x02,  +0x03,  x0xMM,  -0x05,  -0x06,  +0x07,
    -0x10,  x0xmm,  +0x12,  -0x13,  -0x14,  x0xMM,  -0x16,  -0x17,
    +0x20,  +0x21,  x0xmm,  -0x23,  -0x24,  -0x25,  x0xMM,  -0x27,
    -0x30,  -0x31,  +0x32,  x0xmm,  +0x34,  +0x35,  +0x36,  x0xMM,
    x0xMM,  -0x41,  +0x42,  +0x43,  x0xmm,  +0x45,  -0x46,  -0x47,
    +0x50,  x0xMM,  -0x52,  -0x53,  +0x54,  x0xmm,  +0x56,  +0x57,
    +0x60,  -0x61,  x0xMM,  +0x63,  -0x64,  +0x65,  x0xmm,  -0x67,
    -0x70,  +0x71,  +0x72,  x0xMM,  +0x74,  -0x75,  -0x76,  x0xmm
};

const uint16_t ref_f32_u16[ref_n] = {
    xxmmu,  xxmmu,  xxmmu,  0x03u,  xxMMu,  xxmmu,  xxmmu,  0x07u,
    xxmmu,  xxmmu,  0x12u,  xxmmu,  xxmmu,  xxMMu,  xxmmu,  xxmmu,
    0x20u,  0x21u,  xxmmu,  xxmmu,  xxmmu,  xxmmu,  xxMMu,  xxmmu,
    xxmmu,  xxmmu,  0x32u,  xxmmu,  0x34u,  0x35u,  0x36u,  xxMMu,
    xxMMu,  xxmmu,  0x42u,  0x43u,  xxmmu,  0x45u,  xxmmu,  xxmmu,
    0x50u,  xxMMu,  xxmmu,  xxmmu,  0x54u,  xxmmu,  0x56u,  0x57u,
    0x60u,  xxmmu,  xxMMu,  0x63u,  xxmmu,  0x65u,  xxmmu,  xxmmu,
    xxmmu,  0x71u,  0x72u,  xxMMu,  0x74u,  xxmmu,  xxmmu,  xxmmu
};


const float src_f32_1[ref_n] = {
    x0xff/K,  -0x01/K,  -0x02/K,  +0x03/K,  x0xFF/K,  -0x05/K,  -0x06/K,  +0x07/K,
    -0x10/K,  x0xff/K,  +0x12/K,  -0x13/K,  -0x14/K,  x0xFF/K,  -0x16/K,  -0x17/K,
    +0x20/K,  +0x21/K,  x0xff/K,  -0x23/K,  -0x24/K,  -0x25/K,  x0xFF/K,  -0x27/K,
    -0x30/K,  -0x31/K,  +0x32/K,  x0xff/K,  +0x34/K,  +0x35/K,  +0x36/K,  x0xFF/K,
    x0xFF/K,  -0x41/K,  +0x42/K,  +0x43/K,  x0xff/K,  +0x45/K,  -0x46/K,  -0x47/K,
    +0x50/K,  x0xFF/K,  -0x52/K,  -0x53/K,  +0x54/K,  x0xff/K,  +0x56/K,  +0x57/K,
    +0x60/K,  -0x61/K,  x0xFF/K,  +0x63/K,  -0x64/K,  +0x65/K,  x0xff/K,  -0x67/K,
    -0x70/K,  +0x71/K,  +0x72/K,  x0xFF/K,  +0x74/K,  -0x75/K,  -0x76/K,  x0xff/K
};

const int16_t ref_f32_i16_1[ref_n] = {
    x0xmm,  -0x01,  -0x02,  +0x03,  x0xMM,  -0x05,  -0x06,  +0x07,
    -0x10,  x0xmm,  +0x12,  -0x13,  -0x14,  x0xMM,  -0x16,  -0x17,
    +0x20,  +0x21,  x0xmm,  -0x23,  -0x24,  -0x25,  x0xMM,  -0x27,
    -0x30,  -0x31,  +0x32,  x0xmm,  +0x34,  +0x35,  +0x36,  x0xMM,
    x0xMM,  -0x41,  +0x42,  +0x43,  x0xmm,  +0x45,  -0x46,  -0x47,
    +0x50,  x0xMM,  -0x52,  -0x53,  +0x54,  x0xmm,  +0x56,  +0x57,
    +0x60,  -0x61,  x0xMM,  +0x63,  -0x64,  +0x65,  x0xmm,  -0x67,
    -0x70,  +0x71,  +0x72,  x0xMM,  +0x74,  -0x75,  -0x76,  x0xmm
};

const uint16_t ref_f32_u16_1[ref_n] = {
    xxmmu,  xxmmu,  xxmmu,  0x03u,  xxMMu,  xxmmu,  xxmmu,  0x07u,
    xxmmu,  xxmmu,  0x12u,  xxmmu,  xxmmu,  xxMMu,  xxmmu,  xxmmu,
    0x20u,  0x21u,  xxmmu,  xxmmu,  xxmmu,  xxmmu,  xxMMu,  xxmmu,
    xxmmu,  xxmmu,  0x32u,  xxmmu,  0x34u,  0x35u,  0x36u,  xxMMu,
    xxMMu,  xxmmu,  0x42u,  0x43u,  xxmmu,  0x45u,  xxmmu,  xxmmu,
    0x50u,  xxMMu,  xxmmu,  xxmmu,  0x54u,  xxmmu,  0x56u,  0x57u,
    0x60u,  xxmmu,  xxMMu,  0x63u,  xxmmu,  0x65u,  xxmmu,  xxmmu,
    xxmmu,  0x71u,  0x72u,  xxMMu,  0x74u,  xxmmu,  xxmmu,  xxmmu
};


void print_i16(FILE* fp, const int16_t* vp, size_t n)
{
    fprintf(fp, "{ ");
    while (n--) {
        int i = (int)*vp++;
        char sc = ((i < 0) ? '-' : ((i > 0) ? '+' : ' '));
        if (i < 0) i = -i;
        fprintf(fp, "%c%04Xh,  ", sc, (unsigned)i);
    }
    fprintf(fp, "}\n");
}


void print_u16(FILE* fp, const uint16_t* vp, size_t n)
{
    fprintf(fp, "{ ");
    while (n--) {
        fprintf(fp, "%04Xh,  ", (unsigned)*vp++);
    }
    fprintf(fp, "}\n");
}


void print_f32(FILE* fp, const float* vp, size_t n)
{
    fprintf(fp, "{ ");
    while (n--) {
        fprintf(fp, "%+6.2f,  ", *vp++);
    }
    fprintf(fp, "}\n");
}


const int16_t* compare_i16(const int16_t* bufp, const int16_t* refp, size_t len)
{
    while (len--) {
        if (*bufp != *refp) {
            return bufp;
        }
        ++bufp;
        ++refp;
    }
    return NULL;
}


const uint16_t* compare_u16(const uint16_t* bufp, const uint16_t* refp, size_t len)
{
    while (len--) {
        if (*bufp != *refp) {
            return bufp;
        }
        ++bufp;
        ++refp;
    }
    return NULL;
}


const float* compare_f32(const float* bufp, const float* refp, size_t len, float epsilon)
{
    while (len--) {
        if (fabsf(*bufp - *refp) > epsilon) {
            return bufp;
        }
        ++bufp;
        ++refp;
    }
    return NULL;
}


const void* compare_dirty(const void* bufp, uint8_t refv, size_t size)
{
    const uint8_t* sp = (const uint8_t*)bufp;
    const uint8_t* ep = (sp + size);
    while (sp != ep) {
        if (*sp != refv) {
            return sp;
        }
        ++sp;
    }
    return NULL;
}
